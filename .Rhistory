q()
setwd("~/")
setwd("~/")
get()
install.packages("caret")
library(ggplot2)
install.packages("ggplot2")
setwd("C:/Users/BlueShift/Documents/R/Datasets")
setwd("C:/Users/BlueShift/Documents/R/Datasets")
chuva <- read.csv("chuva_mensal", sep = ";", encoding = "UTF-8")
chuva <- read.csv("chuva_mensal", sep = ";", encoding = "UTF-8")
library(readr)
chuva_mensal <- read_csv("chuva_mensal.csv")
View(chuva_mensal)
chuva <- read.csv("chuva_mensal", sep = ";", encoding = "UTF-8")
View(chuva_mensal)
View(chuva)
chuva <- read.csv("mola", sep = ";", encoding = "UTF-8")
chuva <- read.csv("mola", sep = ";", encoding = "UTF-8")
library(dplyr)
setwd("~/R/Datasets")
chuva <- read.csv("mola", sep = ";", encoding = "UTF-8")
library(dplyr)
setwd("C:/Users/BlueShift/Documents/R/Datasets")
chuva <- read.csv("chuva_mensal", sep = ";", encoding = "UTF-8")
View(chuva)
chuva <- read.csv("chuva_tratado", sep = ";", encoding = "UTF-8")
setwd("C:/Users/BlueShift/Documents/R/Datasets")
chuva <- read.csv("chuva_tratado", sep = ";", encoding = "UTF-8")
chuva <- read.csv("chuva_tratado.csv", sep = ";", encoding = "UTF-8")
View(chuva)
#Verificando o formato do DataFrame
str(chuva)
chuva$Janeiro <- as.numeric(chuva$Janeiro)
chuva$Fevereiro <- as.numeric(chuva$Fevereiro)
chuva$Mar.e7.o <- as.numeric(chuva$Mar.e7.o)
chuva$Abril <- as.numeric(chuva$Abril)
chuva$Maio <- as.numeric(chuva$Maio)
chuva$Junho <- as.numeric(chuva$Junho)
chuva$Julho <- as.numeric(chuva$Julho)
chuva$Agosto <- as.numeric(chuva$Agosto)
chuva$Setembro <- as.numeric(chuva$Setembro)
chuva$Outubro <- as.numeric(chuva$Outubro)
chuva$Novembro <- as.numeric(chuva$Novembro)
chuva$Dezembro <- as.numeric(chuva$Dezembro)
View(chuva)
View(chuva)
View(chuva)
chuva <- rename(chuva, Março = Mar.e7.o)
View(chuva)
sapply(chuva, function(X) sum(is.na(X)))
chuva2 <- chuva %>% flter(ano!=2021)
View(chuva)
View(chuva)
View(chuva)
View(chuva)
chuva2 <- as.vector(t(chuva))
print(chuva2)
serie <- ts(chuva2, start = c(1985,1), end = c(2020,12), frequency=12)
print(serie)
plot(serie)
library(forecast)
library(forecast)
media <- ma(serie, order = 7, centre = TRUE)
print(media)
print(media)
plot(media)
plot(serie, xlab = "Tempo (meses)", col = "blue")
lines(media, col="red")
## DECOMPOSIÇÃO ##
decomposicao <- decompose(serie)
plot(decomposicao, col = "blue")
ggseasonplot(window(serie, start=c(2011), end=2016))
serie2 <- tsclean(serie)
lines(serie2, col="red")
plot(serie)
lines(serie2, col="red")
qqnorm(serie2)
qqline(serie2)
# Ho = distribuição normal : p > 0.05
# Ha = distribuição != normal : p <= 0.05
shapiro.test(serie2)
print(serie2)
serie3 <- (serie2)^(1/3)
print(serie3)
hist(serie2)
hist(serie3)
qqnorm(serie2)
qqline(serie3)
shapiro.test(serie3)
library("urca")
#Teste de pearson
# H0 = é estacionária: p > 0.05
# Ha = não estacionária: p <= 0.05
estacionaridade <- ur.pp(serie3)
summary(estacionaridade)
#Consultar a possibilidade sobre a diferenciação
ndiffs(serie3)
serie4 <- diff(serie3)
# TESTE KPSS
# Ho = não é estacionária: teste estatístico > valor critíco
# Ha = é estacionária: teste estatístico < valor critico
kpss <- ur.kpss(serie3)
summary(kpss)
#Teste Dickey Fuller
df <- ur.df(serie3)
summary(df)
# AUTOCORRELAÇÃO
acf(serie3)
pacf(serie3)
tsdisplay(serie3)
# Teste de Autocorrelação
Box.test(serie3, type = "LJung-Box")
# Teste de Autocorrelação
Box.test(serie3, type = "Ljung-Box")
modelo_ar <- arima(serie3, order=c(1,0,0)
modelo_ar <- arima(serie3, order=c(1,0,0))
summary(modelo_ar)
modelo_ar <- arima(serie3, order=c(1,0,0))
modelo_ar <- arima(serie3, order=c(1,0,0)
summary(modelo_ar)
modelo_ar <- arima(serie3, order=c(1,0,0))
summary(modelo_ar)
checkresiduals(modelo_ar)
plot(modelo_ar)
# Previsão
previsao <- forecast(modelo_ar,h=36)
plot(previsao)
lines(serie3-modelo_ar$resid, col="red")
print(previsao)
prev_escala <- as.data.frame(previsao)^3
View(prev_escala)
modelo_ar <- arima(serie3, order=c(10,0,0))
summary(modelo_ar)
checkresiduals(modelo_ar)
checkresiduals(modelo_ar)
plot(modelo_ar)
qqnorm(resid(modelo_ar)
qqnorm(resid(modelo_ar))
qqnorm(resid(modelo_ar))
qqline(resid(modelo_ar))
checkresiduals(modelo_ar))
checkresiduals(modelo_ar)
plot(modelo_ar)
# Previsão
previsao <- forecast(modelo_ar,h=36)
plot(previsao)
lines(serie3-modelo_ar$resid, col="red")
print(previsao)
prev_escala <- as.data.frame(previsao)^3
View(prev_escala)
modelo_ar <- arima(serie3, order=c(10,0,0))
# Previsão
previsao <- forecast(modelo_ar,h=36)
plot(previsao)
# modelo arima:(p,d,q)
# modelo ma: (0,0,q)
modelo_ma <- arima(serie3, order = c(0,0,1))
summary(modelo_ma)
# modelo arima:(p,d,q)
# modelo ma: (0,0,q)
modelo_ma <- arima(serie3, order = c(0,0,8))
summary(modelo_ma)
#ANALISE DOS RESIDUOS
checkresiduals(modelo_ma)
plot(resid(modelo_ma)
plot(resid(modelo_ma))
qqnorm(modelo_ma
qqnorm(modelo_ma)
qqnorm(modelo_ma)
qqnorm(modelo_ma))
##AUTO ARIMA
modelo_auto <- auto.arima(serie3, trace = T, stepwise = F, approximation = F)
summary(modelo_auto)
#Analise dos rediduos
checkresiduals(modelo_auto)
plot(resid(modelo_auto)
plot(resid(modelo_auto))
plot(resid(modelo_auto))
qqnorm(resid(modelo_auto)
qqnorm(resid(modelo_auto))
qqnorm(resid(modelo_auto))
qqline(resid(modelo_auto))
qqline(resid(modelo_auto))
qqline(resid(modelo_auto))
qqline(resid(modelo_auto))
#Ho =não stacionária: teste estatístico > valor critíco
# Ha = é estacionária: teste estatístico < valor critico
shapiro.test(resid(modelo_auto))
acf(resid(modelo_auto))
pacf(resid(modelo_auto))
plot(serie3)
lines(serie3-modelo_auto$resid, col="red")
previsao6 <- forecast(modelo_auto,h=24)
plot(previsao6)
prev_escala <- as.data.frame(previsao6)^3
View(previsao6)
modelo_auto <- auto.arima(serie3, trace = T, stepwise = F, approximation = F,
max.p = 10, max.q = 10, max.P = 4, max.Q = 4)
